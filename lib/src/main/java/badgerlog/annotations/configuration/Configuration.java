package badgerlog.annotations.configuration;

import badgerlog.annotations.StructOptions;
import badgerlog.conversion.UnitConverter;
import edu.wpi.first.units.Unit;
import edu.wpi.first.util.struct.Struct;
import lombok.Getter;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.HashMap;

@SuppressWarnings("UnusedReturnValue")
public class Configuration {

    @Getter
    private String key = null;

    @Getter
    private StructOptions structOptions = null;

    @Getter
    private boolean autoGenerateStruct = false;

    @Getter
    private Struct<?> autoGeneratedStruct = null;

    @Getter
    private boolean isValidConfiguration = true;

    private final HashMap<String, UnitConverter<?>> converters = new HashMap<>();

    public static Configuration createConfigurationFromFieldAnnotations(Field field) {
        Configuration config = new Configuration();
        Annotation[] annotations = field.getDeclaredAnnotations();
        for (Annotation annotation : annotations) {
            handleAnnotation(annotation, config);
        }
        return config;
    }

    @SuppressWarnings("unchecked") // Annotation must have a class of type T from type requirements
    private static <T extends Annotation> void handleAnnotation(T annotation, Configuration config) {
        if (!ConfigHandlerRegistry.hasValidHandler(annotation.annotationType())) return;
        ConfigHandlerRegistry.getHandler((Class<T>) annotation.annotationType()).process(annotation, config);
    }


    @SuppressWarnings("unchecked")
    // can guarantee that the resulting converter is used by the correct mapping type, since it is defined in the mapping 
    public <T extends Unit> UnitConverter<T> getConverter(String id) {
        return (UnitConverter<T>) converters.get(id);
    }

    public <T extends Unit> UnitConverter<T> getDefaultConverter() {
        return getConverter("");
    }

    public Configuration withKey(String key) {
        this.key = key;
        return this;
    }

    public Configuration withConverter(String id, UnitConverter<?> converter) {
        this.converters.put(id, converter);
        return this;
    }

    public Configuration withStructOptions(StructOptions structOptions) {
        this.structOptions = structOptions;
        return this;
    }

    public Configuration withAutoGenerateStruct(boolean autoGenerateStruct) {
        this.autoGenerateStruct = autoGenerateStruct;
        return this;
    }

    public Configuration withGeneratedStruct(Struct<?> generatedStruct) {
        this.autoGeneratedStruct = generatedStruct;
        return this;
    }

    public Configuration makeInvalid() {
        this.isValidConfiguration = false;
        return this;
    }
}
